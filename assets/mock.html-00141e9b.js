import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,d as s,e as n,b as p,f as a}from"./app-2fea2370.js";const l={},u=a(`<h2 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境" aria-hidden="true">#</a> 开发环境</h2><p>如果前端应用和后端接口服务器没有运行在同一个主机上，你需要在开发环境下将接口请求代理到接口服务器。</p><p>如果是同一个主机，可以直接请求具体的接口地址。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>开发环境时候，接口地址在项目根目录下</p><p><code>.env.development</code> 文件配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># vite 本地跨域代理</span>
<span class="token assign-left variable">VITE_PROXY</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;/api&quot;</span>,<span class="token string">&quot;http://localhost:8000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># 接口地址</span>
<span class="token assign-left variable">VITE_GLOB_API_URL</span><span class="token operator">=</span>/api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><code>.env</code> 文件中的字段如果是字符串，则无需加引号，默认全部为字符串</li><li><code>VITE_PROXY</code> 不能换行</li></ul></div><h3 id="跨域处理" tabindex="-1"><a class="header-anchor" href="#跨域处理" aria-hidden="true">#</a> 跨域处理</h3><p>如果你在 <code>src/api/</code> 下面的接口为下方代码，且 <code>.env.development</code> 文件配置如下注释，则在控制台看到的地址为 <code>http://localhost:8001/api/login</code>。</p><p>由于 <code>/api</code> 匹配到了设置的 <code>VITE_PROXY</code>，所以上方实际是请求 <code>http://localhost:8000/login</code>，这样同时也解决了跨域问题。（8001 为项目端口号，<code>http://localhost:8000</code> 为 <code>PROXY</code> 代理的目标地址）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .env.development</span>
<span class="token comment">// VITE_PROXY=[[&quot;/api&quot;,&quot;http://localhost:8000&quot;]]</span>
<span class="token comment">// VITE_GLOB_API_URL=/api</span>

<span class="token keyword">enum</span> Api <span class="token punctuation">{</span>
  Login <span class="token operator">=</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>: 用户登陆
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loginApi</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">params</span><span class="token operator">:</span> LoginParams</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> http<span class="token punctuation">.</span>request<span class="token operator">&lt;</span>LoginResultModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> Api<span class="token punctuation">.</span>Login<span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    params<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="没有跨域时的配置" tabindex="-1"><a class="header-anchor" href="#没有跨域时的配置" aria-hidden="true">#</a> 没有跨域时的配置</h3><p>如果没有跨域问题，可以直接忽略 <code>VITE_PROXY</code> 配置，直接将接口地址设置在 <code>VITE_GLOB_API_URL</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 例如接口地址为 http://localhost:8000 则</span>
<span class="token assign-left variable">VITE_GLOB_API_URL</span><span class="token operator">=</span>http://localhost:8000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有跨域问题，将 <code>VITE_GLOB_API_URL</code> 设置为跟 <code>VITE_PROXY</code> 内其中一个数组的第一个项一致的值即可。</p><p>下方的接口地址设置为 <code>/api</code>，当请求发出的时候会经过 <code>Vite</code> 的 <code>proxy</code> 代理，匹配到了我们设置的 <code>VITE_PROXY</code> 规则，将 <code>/api</code> 转化为 <code>http://localhost:8000</code> 进行请求</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 例如接口地址为 http://localhost:8000 则</span>
<span class="token assign-left variable">VITE_PROXY</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;/basic-api&quot;</span>,<span class="token string">&quot;http://localhost:8000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># 接口地址</span>
<span class="token assign-left variable">VITE_GLOB_API_URL</span><span class="token operator">=</span>/api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跨域原理解析" tabindex="-1"><a class="header-anchor" href="#跨域原理解析" aria-hidden="true">#</a> 跨域原理解析</h3><p>在 <code>vite.config.ts</code> 配置文件中，提供了 <code>server</code> 的 <code>proxy</code> 功能，用于代理 API 请求。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>server<span class="token operator">:</span> <span class="token punctuation">{</span>
  proxy<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      target<span class="token operator">:</span> <span class="token string">&#39;http://localhost:8000&#39;</span><span class="token punctuation">,</span>
      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^/api</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>从浏览器控制台的 Network 看，请求是 <code>http://localhost:8000/api/xxx</code>，这是因为 <code>proxy</code> 配置不会改变本地请求的 <code>url</code>。</p></div><h2 id="生产环境" tabindex="-1"><a class="header-anchor" href="#生产环境" aria-hidden="true">#</a> 生产环境</h2><p>生产环境接口地址在项目根目录下 <code>.env.production</code> 文件配置。</p><p>生产环境接口地址值需要修改 <code>VITE_GLOB_API_URL</code>，如果出现跨域问题，可以使用 <code>nginx</code> 或者后台开启 <code>cors</code> 进行处理</p><div class="hint-container tip"><p class="hint-container-title">打包后如何进行地址修改?</p><p><code>VITE_GLOB_*</code> 开头的变量会在打包的时候注入 <code>_app.config.js</code> 文件内。</p><p>在 <code>dist/_app.config.js</code> 修改相应的接口地址后刷新页面即可，不需要在根据不同环境打包多次，一次打包可以用于多个不同接口环境的部署。</p></div><h2 id="接口请求" tabindex="-1"><a class="header-anchor" href="#接口请求" aria-hidden="true">#</a> 接口请求</h2><p>在 hgb-admin 中:</p><ol><li>页面交互操作；</li><li>调用统一管理的 api 请求函数；</li><li>使用封装的 axios.ts 发送请求；</li><li>获取服务端返回数据</li><li>更新 data；</li></ol><p>接口统一存放于 <code>src/api/</code> 下面管理</p><p>以登陆接口为例:</p><p>在 <code>src/api/</code> 内新建模块文件，其中参数与返回值最好定义一下类型，方便校验。虽然麻烦，但是后续维护字段很方便。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>类型定义文件可以抽取出去统一管理，具体参考项目，至于参数类型校验，可以单独抽离 model 引入</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@/utils/http/axios&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginParams<span class="token punctuation">,</span> LoginResultModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./model/userModel&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getTableList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        url<span class="token operator">:</span> <span class="token string">&#39;/table/list&#39;</span><span class="token punctuation">,</span>
        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        params<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="axios-配置" tabindex="-1"><a class="header-anchor" href="#axios-配置" aria-hidden="true">#</a> axios 配置</h2><p>axios 请求封装存放于 <code>src/utils/http/axios</code> 文件夹内部</p><p>除 <code>index.ts</code> 文件内容需要根据项目自行修改外，其余文件无需修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>├── Axios<span class="token punctuation">.</span>ts <span class="token comment">// axios实例</span>
├── axiosCancel<span class="token punctuation">.</span>ts <span class="token comment">// axiosCancel实例，取消重复请求</span>
├── axiosTransform<span class="token punctuation">.</span>ts <span class="token comment">// 数据转换类</span>
├── checkStatus<span class="token punctuation">.</span>ts <span class="token comment">// 返回状态值校验</span>
├── index<span class="token punctuation">.</span>ts <span class="token comment">// 接口返回统一处理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="index-ts-配置说明" tabindex="-1"><a class="header-anchor" href="#index-ts-配置说明" aria-hidden="true">#</a> index.ts 配置说明</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    timeout<span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token comment">// 接口前缀</span>
    prefixUrl<span class="token operator">:</span> urlPrefix<span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> ContentTypeEnum<span class="token punctuation">.</span><span class="token constant">JSON</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 数据处理方式</span>
    transform<span class="token punctuation">,</span>
    <span class="token comment">// 配置项，下面的选项都可以在独立的接口请求中覆盖</span>
    requestOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认将prefix 添加到url</span>
        joinPrefix<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 需要对返回数据进行处理</span>
        isTransformRequestResult<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// post请求的时候添加参数到url</span>
        joinParamsToUrl<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token comment">// 格式化提交参数时间</span>
        formatDate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 消息提示类型</span>
        errorMessageMode<span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 接口地址</span>
        apiUrl<span class="token operator">:</span> globSetting<span class="token punctuation">.</span>apiUrl <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    withCredentials<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="transform-数据处理说明" tabindex="-1"><a class="header-anchor" href="#transform-数据处理说明" aria-hidden="true">#</a> transform 数据处理说明</h4><p>类型定义，见 <code>axiosTransform.ts</code> 文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AxiosTransform</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之前处理配置
   */</span>
  beforeRequestHook<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> options<span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosRequestConfig<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求成功处理
   */</span>
  transformRequestData<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span><span class="token punctuation">,</span> options<span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求失败处理
   */</span>
  requestCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之前的拦截器
   */</span>
  requestInterceptors<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosRequestConfig<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之后的拦截器
   */</span>
  responseInterceptors<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosResponse<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之前的拦截器错误处理
   */</span>
  requestInterceptorsCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span>: 请求之后的拦截器错误处理
   */</span>
  responseInterceptorsCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目默认 <code>transform</code> 处理逻辑，可以根据各自项目进行处理。一般需要更改的部分为下方代码，见代码注释说明</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>: 数据处理，方便区分多种处理方式
 */</span>
<span class="token keyword">const</span> transform<span class="token operator">:</span> AxiosTransform <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * <span class="token keyword">@description</span>: 处理请求数据
         */</span>
        <span class="token function-variable function">transformRequestData</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span><span class="token punctuation">,</span> options<span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span>
                isTransformRequestResult<span class="token punctuation">,</span>
                isShowMessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                isShowErrorMessage<span class="token punctuation">,</span>
                isShowSuccessMessage<span class="token punctuation">,</span>
                successMessageText<span class="token punctuation">,</span>
                errorMessageText<span class="token punctuation">,</span>
            <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>

            <span class="token keyword">const</span> reject <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span>reject<span class="token punctuation">;</span>

            <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
            <span class="token comment">//  这里 code，result，message为 后台统一的字段，需要在 types.ts内修改为项目自己的接口返回格式</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> result<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
            <span class="token comment">// 请求成功</span>
            <span class="token keyword">const</span> hasSuccess <span class="token operator">=</span> data <span class="token operator">&amp;&amp;</span> Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">===</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>
            <span class="token comment">// 是否显示提示信息</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isShowMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>hasSuccess <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>successMessageText <span class="token operator">||</span> isShowSuccessMessage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 是否显示自定义信息提示</span>
                    Message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>successMessageText <span class="token operator">||</span> message <span class="token operator">||</span> <span class="token string">&#39;操作成功！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasSuccess <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>errorMessageText <span class="token operator">||</span> isShowErrorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 是否显示自定义信息提示</span>
                    Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>message <span class="token operator">||</span> errorMessageText <span class="token operator">||</span> <span class="token string">&#39;操作失败！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasSuccess <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>errorMessageMode <span class="token operator">===</span> <span class="token string">&#39;modal&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// errorMessageMode=‘custom-modal’的时候会显示modal错误弹窗，而不是消息提示，用于一些比较重要的错误</span>
                    Modal<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;错误提示&#39;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> message <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 不进行任何处理，直接返回</span>
            <span class="token comment">// 用于页面代码可能需要直接获取code，data，message这些信息时开启</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isTransformRequestResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// return &#39;[HTTP] Request has no return value&#39;;</span>
                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 接口请求成功，直接返回结果</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 接口请求错误，统一提示错误信息</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&#39;操作失败,系统异常!&#39;</span><span class="token punctuation">;</span>
                    Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 登录超时</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">TIMEOUT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token comment">// 到登录页</span>
                <span class="token keyword">const</span> timeoutMsg <span class="token operator">=</span> <span class="token string">&#39;登录超时,请重新登录!&#39;</span><span class="token punctuation">;</span>
                Modal<span class="token punctuation">.</span><span class="token function">destroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Modal<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    title<span class="token operator">:</span> <span class="token string">&#39;提示&#39;</span><span class="token punctuation">,</span>
                    content<span class="token operator">:</span> <span class="token string">&#39;登录身份已失效,请重新登录!&#39;</span><span class="token punctuation">,</span>
                    <span class="token function-variable function">onOk</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                            name<span class="token operator">:</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>
                            query<span class="token operator">:</span> <span class="token punctuation">{</span>
                                redirect<span class="token operator">:</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>
                            <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>timeoutMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 这里逻辑可以根据项目进行修改</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token comment">// 请求之前处理config</span>
        <span class="token function-variable function">beforeRequestHook</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> apiUrl<span class="token punctuation">,</span> joinPrefix<span class="token punctuation">,</span> joinParamsToUrl<span class="token punctuation">,</span> formatDate<span class="token punctuation">,</span> joinTime <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>joinPrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>urlPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>apiUrl <span class="token operator">&amp;&amp;</span> <span class="token function">isString</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">const</span> params <span class="token operator">=</span> config<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method<span class="token operator">?.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> RequestEnum<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 给 get 请求加上时间戳参数，避免从缓存中拿数据。</span>
                    config<span class="token punctuation">.</span>params <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>params <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">joinTimestamp</span><span class="token punctuation">(</span>joinTime<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 兼容restful风格</span>
                    config<span class="token punctuation">.</span>url <span class="token operator">=</span> config<span class="token punctuation">.</span>url <span class="token operator">+</span> params <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">joinTimestamp</span><span class="token punctuation">(</span>joinTime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
                    config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    formatDate <span class="token operator">&amp;&amp;</span> <span class="token function">formatRequestDate</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    config<span class="token punctuation">.</span>data <span class="token operator">=</span> params<span class="token punctuation">;</span>
                    config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>joinParamsToUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token function">setObjToUrlParams</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 兼容restful风格</span>
                    config<span class="token punctuation">.</span>url <span class="token operator">=</span> config<span class="token punctuation">.</span>url <span class="token operator">+</span> params<span class="token punctuation">;</span>
                    config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> config<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token doc-comment comment">/**
         * <span class="token keyword">@description</span>: 请求拦截器处理
         */</span>
        <span class="token function-variable function">requestInterceptors</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 请求之前处理config</span>
            <span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStoreWidthOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> token <span class="token operator">=</span> userStore<span class="token punctuation">.</span>getToken<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// jwt token</span>
                config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> config<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token doc-comment comment">/**
         * <span class="token keyword">@description</span>: 响应错误处理
         */</span>
        <span class="token function-variable function">responseInterceptorsCatch</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> response<span class="token punctuation">,</span> code<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> error <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> msg<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span>
                response <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>error <span class="token operator">?</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> err<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token string">&#39;ECONNABORTED&#39;</span> <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;接口请求超时,请刷新页面重试!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;Network Error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    Modal<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                        title<span class="token operator">:</span> <span class="token string">&#39;网络异常&#39;</span><span class="token punctuation">,</span>
                        content<span class="token operator">:</span> <span class="token string">&#39;请检查您的网络连接是否正常!&#39;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 请求是否被取消</span>
            <span class="token keyword">const</span> isCancel <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isCancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">checkStatus</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token string">&#39;请求被取消！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> error<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更改参数格式" tabindex="-1"><a class="header-anchor" href="#更改参数格式" aria-hidden="true">#</a> 更改参数格式</h3><p>项目接口默认为 <code>Json</code> 参数格式，即 <code>headers: { &#39;Content-Type&#39;: ContentTypeEnum.JSON }</code>,</p><p>如果需要更改为 <code>form-data</code> 格式，更改 <code>headers</code> 的 <code>&#39;Content-Type 为 ContentTypeEnum.FORM_URLENCODED</code> 即可</p><h3 id="多个接口地址" tabindex="-1"><a class="header-anchor" href="#多个接口地址" aria-hidden="true">#</a> 多个接口地址</h3><p>当项目中需要用到多个接口地址时, 可以在 <code>src/utils/http/axios/index.ts</code> 导出多个 <code>axios</code> 实例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 目前只导出一个默认实例，接口地址对应的是环境变量中的 VITE_GLOB_API_URL 接口地址</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Axios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 需要有其他接口地址的可以在后面添加</span>

<span class="token comment">// other api url</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> AxiosTow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  requestOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    apiUrl<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除请求-url-携带的时间戳参数" tabindex="-1"><a class="header-anchor" href="#删除请求-url-携带的时间戳参数" aria-hidden="true">#</a> 删除请求 URL 携带的时间戳参数</h3><p>如果不需要 url 上面默认携带的时间戳参数 ?_t=xxx</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">requestOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是否加入时间戳</span>
    <span class="token literal-property property">joinTime</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mock-服务" tabindex="-1"><a class="header-anchor" href="#mock-服务" aria-hidden="true">#</a> Mock 服务</h2><p><code>Mock</code> 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发进程所阻塞。</p>`,56),r={href:"https://github.com/vbenjs/vite-plugin-mock",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"mock",-1),d=s("code",null,"mock",-1),v=a(`<h3 id="本地-mock" tabindex="-1"><a class="header-anchor" href="#本地-mock" aria-hidden="true">#</a> 本地 Mock</h3><p>本地 mock 采用 Node.js 中间件进行参数拦截（不采用 mock.js 的原因是本地开发看不到请求参数和响应结果）。</p><h3 id="如何新增-mock-接口" tabindex="-1"><a class="header-anchor" href="#如何新增-mock-接口" aria-hidden="true">#</a> 如何新增 mock 接口</h3><p>如果你想添加 mock 数据，只要在根目录下找到 mock 文件，添加对应的接口，对其进行拦截和模拟数据。</p><p>在 mock 文件夹内新建文件</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>文件新增后会自动更新，不需要手动重启，可以在代码控制台查看日志信息 mock 文件夹内会自动注册，排除以_开头的文件夹及文件</p></div><p><strong>例：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Random <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mockjs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resultSuccess<span class="token punctuation">,</span> doCustomTimes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../_util&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">tableList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">doCustomTimes</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            id<span class="token operator">:</span> <span class="token string">&#39;@integer(10,100)&#39;</span><span class="token punctuation">,</span>
            beginTime<span class="token operator">:</span> <span class="token string">&#39;@datetime&#39;</span><span class="token punctuation">,</span>
            endTime<span class="token operator">:</span> <span class="token string">&#39;@datetime&#39;</span><span class="token punctuation">,</span>
            address<span class="token operator">:</span> <span class="token string">&#39;@city()&#39;</span><span class="token punctuation">,</span>
            name<span class="token operator">:</span> <span class="token string">&#39;@cname()&#39;</span><span class="token punctuation">,</span>
            avatar<span class="token operator">:</span> Random<span class="token punctuation">.</span><span class="token function">image</span><span class="token punctuation">(</span><span class="token string">&#39;400x400&#39;</span><span class="token punctuation">,</span> Random<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Random<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Random<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            date<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@date(&#39;yyyy-MM-dd&#39;)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            time<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@time(&#39;HH:mm&#39;)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;no|100000-10000000&#39;</span><span class="token operator">:</span> <span class="token number">100000</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;status|1&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
    <span class="token comment">//表格数据列表</span>
    <span class="token punctuation">{</span>
        url<span class="token operator">:</span> <span class="token string">&#39;/api/table/list&#39;</span><span class="token punctuation">,</span>
        timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token operator">=</span> query<span class="token punctuation">;</span>
            <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">tableList</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">resultSuccess</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                page<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span>
                pageSize<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
                pageCount<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>
                list<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),m={class:"hint-container tip"},b=s("p",{class:"hint-container-title"},"提示",-1),g={href:"https://github.com/nuysoft/Mock/wiki",target:"_blank",rel:"noopener noreferrer"},h=a(`<h3 id="接口格式" tabindex="-1"><a class="header-anchor" href="#接口格式" aria-hidden="true">#</a> 接口格式</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// mock 接口地址</span>
  method<span class="token operator">?</span><span class="token operator">:</span> MethodType<span class="token punctuation">;</span> <span class="token comment">// 请求方式</span>
  timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 延时时间</span>
  statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 响应状态码</span>
  response<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 响应结果</span>
      body<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
      query<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">|</span> object<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数获取" tabindex="-1"><a class="header-anchor" href="#参数获取" aria-hidden="true">#</a> 参数获取</h3><p><strong>GET</strong> 接口： <code>({ query }) =&gt; { }</code></p><p><strong>POST</strong> 接口： <code>({ body }) =&gt; { }</code></p><h3 id="匹配" tabindex="-1"><a class="header-anchor" href="#匹配" aria-hidden="true">#</a> 匹配</h3><p>在 <code>src/api</code> 下面，如果接口匹配到 mock，则会优先使用 mock 进行响应</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@/utils/http/axios&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//获取table</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getTableList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        url<span class="token operator">:</span> <span class="token string">&#39;/table/list&#39;</span><span class="token punctuation">,</span>
        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        params<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 会匹配到上方的</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
    <span class="token comment">//表格数据列表</span>
    <span class="token punctuation">{</span>
        url<span class="token operator">:</span> <span class="token string">&#39;/api/table/list&#39;</span><span class="token punctuation">,</span>
        timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token operator">=</span> query<span class="token punctuation">;</span>
            <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">tableList</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">resultSuccess</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                page<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span>
                pageSize<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
                pageCount<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>
                list<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口有了-如何去掉-mock" tabindex="-1"><a class="header-anchor" href="#接口有了-如何去掉-mock" aria-hidden="true">#</a> 接口有了，如何去掉 mock</h3><p>当后台接口已经开发完成，只需要将相应的 mock 函数去掉即可。</p><p>以上方接口为例，假如后台接口 login 已经开发完成，则只需要删除/注释掉下方代码即可</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
    <span class="token comment">//表格数据列表</span>
    <span class="token punctuation">{</span>
        url<span class="token operator">:</span> <span class="token string">&#39;/api/table/list&#39;</span><span class="token punctuation">,</span>
        timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token operator">=</span> query<span class="token punctuation">;</span>
            <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">tableList</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">resultSuccess</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                page<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span>
                pageSize<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
                pageCount<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>
                list<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">为什么通过插件注入代码而不是直接在 main.ts 内插入</p><p>在插件内通过 injectCode 插入代码，方便控制 mockjs 是否被打包到最终代码内。如果在 main.ts 内判断，如果关闭了 mock 功能，mockjs 也会打包到构建文件内，这样会增加打包体积。</p></div>`,13);function f(y,w){const t=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("本项目使用 "),s("a",r,[n("vite-plugin-mock"),p(t)]),n(" 来进行 "),k,n(" 数据处理。项目内 "),d,n(" 服务分本地和线上。")]),v,s("div",m,[b,s("p",null,[n("mock 的值可以直接使用 "),s("a",g,[n("mockjs"),p(t)]),n(" 的语法。")])]),h])}const R=e(l,[["render",f],["__file","mock.html.vue"]]);export{R as default};
